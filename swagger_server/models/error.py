# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Error(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, message: str=None, version: str=None, log: List=None):
        """
        Error - a model defined in Swagger

        :param message: The message of this Error.
        :type message: str
        :param version: The version of this Error.
        :type version: str
        """
        self.swagger_types = {
            'message': str,
            'version': str,
            'log': List
        }

        self.attribute_map = {
            'message': 'Message',
            'version': 'version',
            'log': 'log'
        }

        self._message = message
        self._version = version
        self._log = log

    @classmethod
    def from_dict(cls, dikt) -> 'Error':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error of this Error.
        :rtype: Error
        """
        return deserialize_model(dikt, cls)

    @property
    def message(self) -> str:
        """
        Gets the message of this Error.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """
        Sets the message of this Error.

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def version(self) -> str:
        """
        Gets the version of this Error.

        :return: The version of this Error.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """
        Sets the version of this Error.

        :param version: The version of this Error.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def log(self) -> str:
        """
        Gets the version of this Error.

        :return: The version of this Error.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log: str):
        """
        Sets the log of this Error.

        :param log: The log of this Error.
        :type log: str
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")

        self._log = log

